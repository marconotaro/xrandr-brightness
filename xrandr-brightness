#! /usr/bin/env python3
"""Control OLED display brightness by running xrandr commands.

xrandr-brightness brightness max-brightness - set brightness manually
xrandr-brightness apply - apply brightness from system setting
xrandr-brightness watch - continuously update to system setting
"""

import sys
import os
import subprocess
import time
import fcntl
import signal
import threading
import logging

TEMP_FOLDER = '/tmp'
BACKLIGHT_PATH = '/sys/class/backlight/intel_backlight'
BRIGHTNESS_PATH = os.path.join(BACKLIGHT_PATH, 'brightness')
MAX_BRIGHTNESS_PATH = os.path.join(BACKLIGHT_PATH, 'max_brightness')
CWD = os.path.dirname(__file__)

LOCK = threading.Lock()
DEVICE_ID = None

def get_device_id():
    global DEVICE_ID
    if DEVICE_ID is None:
        # xrandr | grep "connected primary" | cut -d" " -f1
        xrandr = subprocess.Popen(['xrandr'], stdout=subprocess.PIPE)
        grep = subprocess.Popen(['grep', 'connected primary'], stdin=xrandr.stdout, stdout=subprocess.PIPE)
        cut = subprocess.Popen(['cut', '-d', ' ', '-f', '1'], stdin=grep.stdout, stdout=subprocess.PIPE)
        xrandr.stdout.close()
        grep.communicate()
        DEVICE_ID = cut.communicate()[0].decode('ascii').rstrip()
    return DEVICE_ID


def xrandr_brightness(brightness, max_brightness):
    xrandr_brightness = float(brightness) / float(max_brightness)
    logging.debug('Apply brightness %s (from %s/%s)', xrandr_brightness, brightness, max_brightness)
    device_id = get_device_id()
    if device_id != None:
        subprocess.call(['xrandr', '--output', device_id, '--brightness', str(xrandr_brightness)])


def xrandr_brightness_apply():
    with open(BRIGHTNESS_PATH) as infile:
        brightness = int(infile.readline())
    with open(MAX_BRIGHTNESS_PATH) as infile:
        max_brightness = int(infile.readline())
    xrandr_brightness(brightness, max_brightness)


def handler(signum, frame):
    if LOCK.acquire(blocking=False):
        try:
            xrandr_brightness_apply()
        except subprocess.CalledProcessError as ex:
            logging.exception('Error during call to xrandr_brightness')
            logging.error(ex.stdout)
        except BaseException:
            logging.exception('Error during call to xrandr_brightness')
        finally:
            LOCK.release()


def main():
    logging.basicConfig(level=logging.INFO,
                        format='%(levelname)s: %(message)s')

    if len(sys.argv) == 2 and sys.argv[1] == 'apply':
        xrandr_brightness_apply()

    elif len(sys.argv) == 2 and sys.argv[1] == 'watch':
        try:
            xrandr_brightness_apply()
        except BaseException:
            logging.exception('device-make-profile-default')
        signal.signal(signal.SIGIO, handler)
        fd = os.open(BACKLIGHT_PATH, os.O_RDONLY)
        fcntl.fcntl(fd, fcntl.F_SETSIG, 0)
        fcntl.fcntl(fd, fcntl.F_NOTIFY, fcntl.DN_MODIFY| fcntl.DN_MULTISHOT)

        while True:
            time.sleep(1000000)

    elif len(sys.argv) == 3:
        brightness = int(sys.argv[1])
        max_brightness = int(sys.argv[2])
        xrandr_brightness(brightness, max_brightness)

    else:
        print(__doc__)


if __name__ == '__main__':
    main()
